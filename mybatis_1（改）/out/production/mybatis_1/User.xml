<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace命名空间，作用是对sql进行分类管理
    注意：使用mapper代理方法开发，namespace有特殊重要的作用-->
<mapper namespace="test">

    <!--在映射文件中配置很多sql语句-->
    <!--通过select执行数据库查询
        id：标识映射文件中的sql，称为statement的id
        #{}表示一个占位符号
        #{id}:其中id表示接收输入的参数，参数名称为id，如果输入的是简单类型，#{}中的参数名可以是任意名称
        resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象
    -->
    <select id="findUserBtId" parameterType="int" resultType="org.mybatis.first.User">
        SELECT * FROM user WHERE id=#{id}
    </select>

    <!--${}表示拼接sql串，会引起sql注入且其中只能使用value,${value}-->
    <select id="findUserByName" parameterType="String" resultType="org.mybatis.first.User">
        SELECT * FROM user WHERE username LIKE '%${value}%'
    </select>

    <insert id="insertUser" parameterType="org.mybatis.first.User">
        <!--
        将插入数据的主键返回，返回到user对象中
        SELECT last_insert_id() 得到刚inset进去的记录的主键值，只适用于自增的主键
        keyProperty：将查询的主键值设置到parameterType指定对象的哪个属性
        order：相对于insert的执行顺序
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
          SELECT last_insert_id()
        </selectKey>
        INSERT INTO user (username, birthday, sex, address) VALUE (#{username},#{birthday},#{sex},#{address})
    </insert>

    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE FROM user WHERE id=#{id}
    </delete>

    <!--根据id更新用户
    分析：
    需要传入用户id
    需要传入用户更新信息
    parameterType指定user对象，包括id和更新信息，注意：id必须存在
    #{id}:从输入user对象中获取id属性
    -->
    <update id="updateUser" parameterType="org.mybatis.first.User">
        UPDATE user SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
        WHERE id=#{id}
    </update>
</mapper>